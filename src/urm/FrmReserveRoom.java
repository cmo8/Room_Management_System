/**
 * @Project Name: Room Management System.
 * @Package Code: urm
 * @Date Project Started: October 1st, 2013
 * @Date Implementation started: November 13th, 2013
 * @Description: The users of the system will be able to login and the user will be able to reserve
 * a room and delete your room reservation.
 * @TODO: Get the Building combo box to be populated by a query that gets the distinct building
 * names from the available_rooms database
 * @author: Sean Morgan
 */
package urm;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;

/**
 * @Class FrmReserveRoom: This form allows the user to reserve a room for a period of time and when 
 * requesting the reservation it checks to see that there is no other reservations for that room at
 * that it.
 * @author Sean
 */
public class FrmReserveRoom extends javax.swing.JFrame {

   private String userName;
   private FrmMenu frmMenu;
   private final int DAYS_THIRTY_ONE = 31;                    // Max days in 7 months
   private final int DAYS_THIRTY = 30;                    // Max days in 4 momths
   private final int FEB_DAYS = 28;                  // Max days February has
   private final int LEAP_YEAR_FEB_DAYS = 29;        // Number of days for February in a leap year
   private final int LEAP_YEAR_DIV = 4;              // Leap year is every for years
   private final int LEAP_YEAR_REMOVE_DIV = 100;     // Leap year is not divisable by 100
   private final int LEAP_YEAR_ADD_IN_DIV = 400;

   /**
    * Creates new form GetReservation
    */
   public FrmReserveRoom() {
      initComponents();
   }

   /**
    * This method is called from within the constructor to initialize the form. WARNING: Do NOT
    * modify this code. The content of this method is always regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      jLabel1 = new javax.swing.JLabel();
      jLabel2 = new javax.swing.JLabel();
      jLabel3 = new javax.swing.JLabel();
      jLabel4 = new javax.swing.JLabel();
      jLabel5 = new javax.swing.JLabel();
      cbxBuilding = new javax.swing.JComboBox();
      cbxRoomNumber = new javax.swing.JComboBox();
      cbxEndTime = new javax.swing.JComboBox();
      cbxStartTime = new javax.swing.JComboBox();
      btnSubmit = new javax.swing.JButton();
      jLabel6 = new javax.swing.JLabel();
      btnBack = new javax.swing.JButton();
      cbxMonth = new javax.swing.JComboBox();
      cbxDay = new javax.swing.JComboBox();
      cbxYear = new javax.swing.JComboBox();
      cbxRoomType = new javax.swing.JComboBox();
      jLabel7 = new javax.swing.JLabel();
      jMenuBar1 = new javax.swing.JMenuBar();
      jMenu1 = new javax.swing.JMenu();
      mbnExit = new javax.swing.JMenuItem();

      setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
      setTitle("Room Managment System");
      setMaximumSize(new java.awt.Dimension(400, 500));
      setMinimumSize(new java.awt.Dimension(400, 500));
      setPreferredSize(new java.awt.Dimension(400, 500));
      setResizable(false);

      jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
      jLabel1.setText("Start Time");

      jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
      jLabel2.setText("End Time");

      jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
      jLabel3.setText("Date");

      jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
      jLabel4.setText("Building");

      jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
      jLabel5.setText("Room Number");

      cbxBuilding.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Art Building", "Boebel Hall", "Center for the Arts", "Doudna Hall", "Engineering Hall", "Gardner Hall", "Karrmann Library", "Ottensman Hall", "Pioneer Tower", "Russell Hall", "Ullrich Hall", "Ullsvik Hall", "Warner Hall", "Williams Fieldhouse" }));
      cbxBuilding.setSelectedIndex(-1);
      cbxBuilding.addItemListener(new java.awt.event.ItemListener() {
         public void itemStateChanged(java.awt.event.ItemEvent evt) {
            cbxBuildingItemStateChanged(evt);
         }
      });

      cbxRoomNumber.setEnabled(false);

      cbxEndTime.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0900", "1000", "1100", "1200", "1300", "1400", "1500", "1600", "1700" }));
      cbxEndTime.setSelectedIndex(-1);
      cbxEndTime.setEnabled(false);

      cbxStartTime.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0800", "0900", "1000", "1100", "1200", "1300", "1400", "1500", "1600", " " }));
      cbxStartTime.setSelectedIndex(-1);
      cbxStartTime.addItemListener(new java.awt.event.ItemListener() {
         public void itemStateChanged(java.awt.event.ItemEvent evt) {
            cbxStartTimeItemStateChanged(evt);
         }
      });

      btnSubmit.setText("Submit");
      btnSubmit.setMaximumSize(new java.awt.Dimension(100, 50));
      btnSubmit.setMinimumSize(new java.awt.Dimension(100, 50));
      btnSubmit.setPreferredSize(new java.awt.Dimension(100, 50));
      btnSubmit.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnSubmitActionPerformed(evt);
         }
      });

      jLabel6.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
      jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
      jLabel6.setText("Reserve Room Request");

      btnBack.setText("Back");
      btnBack.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnBackActionPerformed(evt);
         }
      });

      cbxMonth.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" }));
      cbxMonth.setSelectedIndex(-1);
      cbxMonth.addItemListener(new java.awt.event.ItemListener() {
         public void itemStateChanged(java.awt.event.ItemEvent evt) {
            cbxMonthItemStateChanged(evt);
         }
      });

      cbxYear.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "2013", "2014", "2015", "2016" }));

      cbxRoomType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Class Room", "Computer Lab", "Conference" }));
      cbxRoomType.setSelectedIndex(-1);
      cbxRoomType.setEnabled(false);
      cbxRoomType.addItemListener(new java.awt.event.ItemListener() {
         public void itemStateChanged(java.awt.event.ItemEvent evt) {
            cbxRoomTypeItemStateChanged(evt);
         }
      });

      jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
      jLabel7.setText("Room Type");

      jMenu1.setText("File");

      mbnExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
      mbnExit.setText("Exit");
      mbnExit.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            mbnExitActionPerformed(evt);
         }
      });
      jMenu1.add(mbnExit);

      jMenuBar1.add(jMenu1);

      setJMenuBar(jMenuBar1);

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addGap(0, 0, Short.MAX_VALUE)
            .addComponent(btnBack)
            .addGap(50, 50, 50))
         .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                  .addGap(52, 52, 52)
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                           .addComponent(jLabel1)
                           .addGroup(layout.createSequentialGroup()
                              .addGap(10, 10, 10)
                              .addComponent(cbxStartTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(100, 100, 100)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                           .addComponent(jLabel2)
                           .addGroup(layout.createSequentialGroup()
                              .addGap(10, 10, 10)
                              .addComponent(cbxEndTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 99, Short.MAX_VALUE))
                     .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                           .addComponent(jLabel3)
                           .addGroup(layout.createSequentialGroup()
                              .addComponent(cbxYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                              .addGap(18, 18, 18)
                              .addComponent(cbxMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                              .addGap(18, 18, 18)
                              .addComponent(cbxDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))))
               .addGroup(layout.createSequentialGroup()
                  .addGap(100, 100, 100)
                  .addComponent(btnSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addGap(0, 0, Short.MAX_VALUE))
               .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                  .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                  .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addContainerGap(13, Short.MAX_VALUE))
         .addGroup(layout.createSequentialGroup()
            .addGap(20, 20, 20)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jLabel4)
               .addComponent(cbxBuilding, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(layout.createSequentialGroup()
                  .addComponent(jLabel7)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                  .addComponent(jLabel5)
                  .addContainerGap())
               .addGroup(layout.createSequentialGroup()
                  .addComponent(cbxRoomType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(cbxRoomNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addGap(85, 85, 85))))
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addGap(20, 20, 20)
            .addComponent(jLabel6)
            .addGap(33, 33, 33)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(layout.createSequentialGroup()
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                     .addComponent(jLabel4)
                     .addComponent(jLabel7))
                  .addGap(10, 10, 10)
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                     .addComponent(cbxBuilding, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(cbxRoomType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(cbxRoomNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
               .addComponent(jLabel5))
            .addGap(18, 18, 18)
            .addComponent(jLabel3)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(cbxMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(cbxDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(cbxYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(38, 38, 38)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(layout.createSequentialGroup()
                  .addComponent(jLabel1)
                  .addGap(10, 10, 10)
                  .addComponent(cbxStartTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
               .addGroup(layout.createSequentialGroup()
                  .addComponent(jLabel2)
                  .addGap(10, 10, 10)
                  .addComponent(cbxEndTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGap(28, 28, 28)
            .addComponent(btnSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(30, 30, 30)
            .addComponent(btnBack)
            .addGap(50, 50, 50))
      );

      pack();
      setLocationRelativeTo(null);
   }// </editor-fold>//GEN-END:initComponents
/**
 * @Method: btnBackActionPerformed
 * @Detail: This button hides the current form and show the Menu form.
 * @param evt 
 */
   private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
      frmMenu.setVisible(true);
      this.setVisible(false);
   }//GEN-LAST:event_btnBackActionPerformed
/**
 * @Method: cbxBuildingItemStateChanged
 * @Detail: When a building is selected from the drop down list a query checks to see what room 
 * numbers are associated to the building selected and then it populates the room number list box 
 * with all the rooms that are in that building
 * @param evt 
 */
   private void cbxBuildingItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxBuildingItemStateChanged
      String building = cbxBuilding.getSelectedItem().toString();
      cbxRoomNumber.removeAllItems();
      AvailableRoomsDAO stu = new AvailableRoomsDAO();
      ArrayList<AvailableRooms> myList = new ArrayList<AvailableRooms>();
      try {
         for (Object em : (ArrayList) stu.getRoomNumbers(building)) {
            myList.add((AvailableRooms) em);
         }
      } catch (SQLException ex) {
         //Logger.getLogger(this.class.getName()).log(Level.SERVER, null, ex);
      }
      if (myList.size() > 0) {
         for (int i = 0; i < myList.size(); i++) {
            AvailableRooms hashmap = myList.get(i);
            cbxRoomNumber.addItem(hashmap.getRoomNumber());
         }
         cbxRoomNumber.setEnabled(true);
         cbxRoomType.setEnabled(true);
      }
   }//GEN-LAST:event_cbxBuildingItemStateChanged
/**
 * @Method: cbxMonthItemStateChanged
 * @Detail: When a month is selected the day list box is populated with the correct number of days
 * in that month
 * @param evt 
 */
   private void cbxMonthItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxMonthItemStateChanged
      String month = cbxMonth.getSelectedItem().toString();
      int year = Integer.parseInt(cbxYear.getSelectedItem().toString());
      int day;
      cbxDay.removeAllItems();
      if (month == "January" || month == "March" || month == "May" || month == "July"
              || month == "August" || month == "October" || month == "December") {
         day = DAYS_THIRTY_ONE;
      } else if (month == "April" || month == "June" || month == "September" || month == "November") {
         day = DAYS_THIRTY;
      } else if (month == "February" && year % LEAP_YEAR_DIV == 0 && year % LEAP_YEAR_REMOVE_DIV != 0
              || year % LEAP_YEAR_ADD_IN_DIV == 0) {
         day = LEAP_YEAR_FEB_DAYS;
      } else {
         day = FEB_DAYS;
      }
      for (int i = 1; i <= day; i++) {
         cbxDay.addItem(i);
      }
   }//GEN-LAST:event_cbxMonthItemStateChanged
/**
 * @Method: btnSubmitActionPerformed
 * @Detail: This button take all the values from all the combo boxes and stores then as variables 
 * that are used when checking to see if the requested reservation time is a valid time and if so it
 * adds the reservation to the database and then gets the reservation tracking number and gives a 
 * pop up telling the the user that the reservation was successful or it tells the user that there 
 * is a conflict with another reservation in the database. 
 * @param evt 
 */
   private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
      ReservedRoomDAO rhs = new ReservedRoomDAO();
      String buildingName = cbxBuilding.getSelectedItem().toString();
      int roomNumber = Integer.parseInt(cbxRoomNumber.getSelectedItem().toString());
      int day = Integer.parseInt(cbxDay.getSelectedItem().toString());
      int month;
      switch (cbxMonth.getSelectedItem().toString()) {
         case "January":
            month = 1;
            break;
         case "March":
            month = 3;
            break;
         case "May":
            month = 5;
            break;
         case "July":
            month = 7;
            break;
         case "August":
            month = 8;
            break;
         case "October":
            month = 10;
            break;
         case "December":
            month = 12;
            break;
         case "April":
            month = 4;
            break;
         case "June":
            month = 6;
            break;
         case "September":
            month = 9;
            break;
         case "November":
            month = 11;
            break;
         default:
            month = 2;
            break;
      }
      int year = Integer.parseInt(cbxYear.getSelectedItem().toString());
      int startTime = Integer.parseInt(cbxStartTime.getSelectedItem().toString());
      int endTime = Integer.parseInt(cbxEndTime.getSelectedItem().toString());
      boolean insertRequest = false;
      System.out.println("Current user: " + userName);
      insertRequest = checkRegistration(rhs, buildingName, roomNumber, day, month, year, startTime, endTime);
      if (insertRequest) {
         try {
            rhs.insertReservation(buildingName, roomNumber, day, month, year, startTime, endTime, userName);
            JOptionPane.showMessageDialog(null, "Your reservation tracking number is "
                    + getReservationNumber(buildingName, roomNumber, day, month, year, startTime, endTime, userName) + ".", "InfoBox: "
                    + "Successful", JOptionPane.INFORMATION_MESSAGE);
            System.out.println("!!!Congrats on your reservation!!!");
         } catch (SQLException ex) {
            System.out.println("Conflict Could not reserve time slot!");
            //Logger.getLogger(this.class.getName()).log(Level.SERVER, null, ex);
         }
      } else {
         JOptionPane.showMessageDialog(null, "Your reservation conflics with a another reservation.", "InfoBox: "
                 + "Failure", JOptionPane.INFORMATION_MESSAGE);
      }
   }//GEN-LAST:event_btnSubmitActionPerformed
/**
 * @Method: cbxStartTimeItemStateChanged
 * @Detail: When a start time is selected by the user, the end times list box is populated with the
 * time an hour after the user selected to 1700 or 5pm. Then if the user only wants the room for an
 * hour that is default and if the user wants the room longer they can select the end time they
 * want.
 * @param evt 
 */
   private void cbxStartTimeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxStartTimeItemStateChanged
      if ( cbxEndTime.isEnabled() == false)
         cbxEndTime.setEnabled(true);
      cbxEndTime.removeAllItems();         
      for (int i = Integer.parseInt(cbxStartTime.getSelectedItem().toString()) + 100; i <= 1700; i += 100) {
         cbxEndTime.addItem(i);
      }
   }//GEN-LAST:event_cbxStartTimeItemStateChanged
/**
 * @Method: mbnExitActionPerformed
 * @Detail: Closes the application
 * @param evt 
 */
   private void mbnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mbnExitActionPerformed
      System.exit(0);
   }//GEN-LAST:event_mbnExitActionPerformed
/**
 * @Method: cbxRoomTypeItemStateChanged
 * @Detail: When a room type is selected from the drop down list a query checks to see what room 
 * numbers are associated to the building selected and room type selected and then it populates the 
 * room number list box with all the rooms that are in that building with that room type
 * @param evt 
 */
   private void cbxRoomTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxRoomTypeItemStateChanged
      String building = cbxBuilding.getSelectedItem().toString();
      String roomType = cbxRoomType.getSelectedItem().toString();
      cbxRoomNumber.removeAllItems();
      AvailableRoomsDAO stu = new AvailableRoomsDAO();
      ArrayList<AvailableRooms> myList = new ArrayList<AvailableRooms>();
      try {
         for (Object em : (ArrayList) stu.getTypeRoomNumbers(building, roomType)) {
            myList.add((AvailableRooms) em);
         }
      } catch (SQLException ex) {
         //Logger.getLogger(this.class.getName()).log(Level.SERVER, null, ex);
      }
      if (myList.size() > 0) {
         for (int i = 0; i < myList.size(); i++) {
            AvailableRooms hashmap = myList.get(i);
            cbxRoomNumber.addItem(hashmap.getRoomNumber());
         }
         cbxRoomNumber.setVisible(true);
      }
   }//GEN-LAST:event_cbxRoomTypeItemStateChanged

   /**
    * @param args the command line arguments
    */
   public static void main(String args[]) {
      /* Set the Nimbus look and feel */
      //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
       * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
       */
      try {
         for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
            if ("Nimbus".equals(info.getName())) {
               javax.swing.UIManager.setLookAndFeel(info.getClassName());
               break;
            }
         }
      } catch (ClassNotFoundException ex) {
         java.util.logging.Logger.getLogger(FrmReserveRoom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (InstantiationException ex) {
         java.util.logging.Logger.getLogger(FrmReserveRoom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (IllegalAccessException ex) {
         java.util.logging.Logger.getLogger(FrmReserveRoom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (javax.swing.UnsupportedLookAndFeelException ex) {
         java.util.logging.Logger.getLogger(FrmReserveRoom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      }
      //</editor-fold>

      /* Create and display the form */
      java.awt.EventQueue.invokeLater(new Runnable() {
         public void run() {
            new FrmReserveRoom().setVisible(true);
         }
      });
   }
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton btnBack;
   private javax.swing.JButton btnSubmit;
   private javax.swing.JComboBox cbxBuilding;
   private javax.swing.JComboBox cbxDay;
   private javax.swing.JComboBox cbxEndTime;
   private javax.swing.JComboBox cbxMonth;
   private javax.swing.JComboBox cbxRoomNumber;
   private javax.swing.JComboBox cbxRoomType;
   private javax.swing.JComboBox cbxStartTime;
   private javax.swing.JComboBox cbxYear;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JLabel jLabel3;
   private javax.swing.JLabel jLabel4;
   private javax.swing.JLabel jLabel5;
   private javax.swing.JLabel jLabel6;
   private javax.swing.JLabel jLabel7;
   private javax.swing.JMenu jMenu1;
   private javax.swing.JMenuBar jMenuBar1;
   private javax.swing.JMenuItem mbnExit;
   // End of variables declaration//GEN-END:variables
/**
 * @Method: getCreds
 * @Detail: This get the current user information and a reference to the Menu form from the Menu 
 * form
 * @param inUserName
 * @param inFrmMenu 
 */
   void getCreds(String inUserName, FrmMenu inFrmMenu) {
      userName = inUserName;
      frmMenu = inFrmMenu;
   }
/**
 * @Method: checkRegistration
 * @Detail: This calls a query that gets all the reservation that are in the same same building,
 * room and on the same day as the reservation that is requesting to be reserved. Then is goes
 * through the list and checks the times against the requested times
 * @param rhs
 * @param buildingName
 * @param roomNumber
 * @param day
 * @param month
 * @param year
 * @param startTime
 * @param endTime
 * @return if the reservation is valid return true so it will be added else it returns false
 */
   private boolean checkRegistration(ReservedRoomDAO rhs, String buildingName, int roomNumber, int day, int month, int year, int startTime, int endTime) {
      try {
         List<ReservedRooms> myList = rhs.getBRoomDateReservations(buildingName, roomNumber, day, month, year);
         if (myList.isEmpty()) {
            return true;
         } else {
            for (int i = 0; i < myList.size(); i++) {
               if (i == 0 && myList.get(i).getStartTime() >= endTime) {
                  return true;
               } else if (i == myList.size() - 1 && myList.get(i).getEndTime() <= startTime) {
                  return true;
               } else if (i != myList.size() - 1 && myList.get(i).getEndTime() <= startTime
                       && myList.get(i + 1).getStartTime() >= endTime) {
                  return true;
               }
            }
            return false;
         }
      } catch (SQLException ex) {
         //Logger.getLogger(this.class.getName()).log(Level.SERVER, null, ex);
         return false;
      }
   }
/**
 * @Method: getReservationNumber
 * @Detail: This gets the reservation number of the reservation that was just added to the database
 * so the user will know the tracking number is.
 * @param buildingName
 * @param roomNumber
 * @param day
 * @param month
 * @param year
 * @param startTime
 * @param endTime
 * @param userName
 * @return The reservation number of the users new reservation
 */
   private String getReservationNumber(String buildingName, int roomNumber, int day, int month, int year, int startTime, int endTime, String userName) {
      String reservationNumber;
      ReservedRoomDAO stu = new ReservedRoomDAO();
      List<ReservedRooms> myList;
      try {
         myList = stu.getReservation(buildingName, roomNumber, day, month, year, startTime, endTime, userName);
         reservationNumber = myList.get(0).getReservationNumber().toString();
         return reservationNumber;
      } catch (SQLException ex) {
         return null;
      }
   }
}
