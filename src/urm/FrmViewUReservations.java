/**
 * @Project Name: Room Management System.
 * @Package Code: urm
 * @Date Project Started: October 1st, 2013
 * @Date Implementation started: November 13th, 2013
 * @Description: The users of the system will be able to login and the user will be able to reserve
 * a room and delete your room reservation.
 * 
 * @author: Sean Morgan
 */
package urm;

import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;

/**
 * @Class FrmViewUReservations: This is the form that the user can view their reservations and if
 * they need to they can delete any of there reservations that they do not need any more.
 * @author Sean
 */
public class FrmViewUReservations extends javax.swing.JFrame {
   private String userName;
   private FrmMenu frmMenu;
   /**
    * Creates new form FrmViewUReservations
    */
   public FrmViewUReservations() {
      initComponents();
   }

   /**
    * This method is called from within the constructor to initialize the form. WARNING: Do NOT
    * modify this code. The content of this method is always regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      jLabel1 = new javax.swing.JLabel();
      jScrollPane2 = new javax.swing.JScrollPane();
      jTable2 = new javax.swing.JTable();
      btnDelete = new javax.swing.JButton();
      jLabel2 = new javax.swing.JLabel();
      btnBack = new javax.swing.JButton();
      jMenuBar1 = new javax.swing.JMenuBar();
      jMenu1 = new javax.swing.JMenu();
      mbnExit = new javax.swing.JMenuItem();

      setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

      jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
      jLabel1.setText("Your Reservations");

      jTable2.setModel(new javax.swing.table.DefaultTableModel(
         new Object [][] {

         },
         new String [] {
            "Tracking Number", "Building Name", "Room Number", "Day", "Month", "Year", "Start Time", "End Time", "Reserved For"
         }
      ) {
         Class[] types = new Class [] {
            java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class
         };
         boolean[] canEdit = new boolean [] {
            false, false, false, false, false, false, false, false, false
         };

         public Class getColumnClass(int columnIndex) {
            return types [columnIndex];
         }

         public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit [columnIndex];
         }
      });
      jScrollPane2.setViewportView(jTable2);

      btnDelete.setText("Delete");
      btnDelete.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnDeleteActionPerformed(evt);
         }
      });

      jLabel2.setText("Delete Selected Reservation");

      btnBack.setText("Back");
      btnBack.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            btnBackActionPerformed(evt);
         }
      });

      jMenu1.setText("File");

      mbnExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
      mbnExit.setText("Exit");
      mbnExit.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            mbnExitActionPerformed(evt);
         }
      });
      jMenu1.add(mbnExit);

      jMenuBar1.add(jMenu1);

      setJMenuBar(jMenuBar1);

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addGap(0, 27, Short.MAX_VALUE)
            .addComponent(jLabel1)
            .addGap(283, 283, 283))
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jScrollPane2)
            .addContainerGap())
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addGap(86, 86, 86)
            .addComponent(jLabel2)
            .addGap(26, 26, 26)
            .addComponent(btnDelete)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btnBack)
            .addGap(50, 50, 50))
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addGap(15, 15, 15)
            .addComponent(jLabel1)
            .addGap(15, 15, 15)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(30, 30, 30)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel2)
               .addComponent(btnDelete)
               .addComponent(btnBack))
            .addGap(50, 50, 50))
      );

      pack();
      setLocationRelativeTo(null);
   }// </editor-fold>//GEN-END:initComponents
/**
 * @Method: mbnExitActionPerformed
 * @Detail: Closes the application
 * @param evt 
 */
   private void mbnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mbnExitActionPerformed
      System.exit(0);
   }//GEN-LAST:event_mbnExitActionPerformed
/**
 * @Method: btnDeleteActionPerformed
 * @Detail: Deletes the selected reservation from the database
 * @param evt 
 */
   private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
      int row = jTable2.getSelectedRow();
      if (row != -1) {
         int d = (int) jTable2.getValueAt(row, 0);
         ReservedRoomDAO stu = new ReservedRoomDAO();
         try {
            stu.deleteReservation(d);
         } catch (SQLException ex) {
            //Logger.getLogger(this.class.getName()).log(Level.SERVER, null, ex);
         }
      }
      loadTable();
   }//GEN-LAST:event_btnDeleteActionPerformed
/**
 * @Method: btnBackActionPerformed
 * @Detail: This button hides the current form and shows the Menu form for the user.
 * @param evt 
 */
   private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
      this.setVisible(false);
      frmMenu.setVisible(true);
   }//GEN-LAST:event_btnBackActionPerformed

   /**
    * @param args the command line arguments
    */
   public static void main(String args[]) {
      /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
       * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
       */
      try {
         for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
            if ("Nimbus".equals(info.getName())) {
               javax.swing.UIManager.setLookAndFeel(info.getClassName());
               break;
            }
         }
      } catch (ClassNotFoundException ex) {
         java.util.logging.Logger.getLogger(FrmViewUReservations.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (InstantiationException ex) {
         java.util.logging.Logger.getLogger(FrmViewUReservations.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (IllegalAccessException ex) {
         java.util.logging.Logger.getLogger(FrmViewUReservations.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      } catch (javax.swing.UnsupportedLookAndFeelException ex) {
         java.util.logging.Logger.getLogger(FrmViewUReservations.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      }
        //</editor-fold>

      /* Create and display the form */
      java.awt.EventQueue.invokeLater(new Runnable() {
         public void run() {
            new FrmViewUReservations().setVisible(true);
         }
      });
   }

   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton btnBack;
   private javax.swing.JButton btnDelete;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JMenu jMenu1;
   private javax.swing.JMenuBar jMenuBar1;
   private javax.swing.JScrollPane jScrollPane2;
   private javax.swing.JTable jTable2;
   private javax.swing.JMenuItem mbnExit;
   // End of variables declaration//GEN-END:variables
/**
    * @Method: getCreds
    * @Detail: This passes the vital information from the Menu from
    * @param inUserName
    * @param inFrmMenu
    */
   public void getCreds(String inUserName, FrmMenu inFrmMenu) {
      userName = inUserName;
      frmMenu = inFrmMenu;
      loadTable();
   }

   /**
    * @Method: loadTable
    * @Detail: This calls a query from the ReservedRoomDAO object to get all of the users
    * reservations and then display then in the table on the form for the user to view.
    */
   private void loadTable() {
      ReservedRoomDAO stu = new ReservedRoomDAO();
      ArrayList<ReservedRooms> myList = new ArrayList<ReservedRooms>();
      try {
         for (Object em : (ArrayList) stu.getUsersReservations(userName)) {
            myList.add((ReservedRooms) em);
         }
      } catch (SQLException ex) {
         //Logger.getLogger(this.class.getName()).log(Level.SERVER, null, ex);
      }
      DefaultTableModel amod = new DefaultTableModel();
      Object[] tableColumnNames = new Object[9];
      tableColumnNames[0] = "Reservation Number";
      tableColumnNames[1] = "Building Name";
      tableColumnNames[2] = "Room Number";
      tableColumnNames[3] = "Day";
      tableColumnNames[4] = "Month";
      tableColumnNames[5] = "Year";
      tableColumnNames[6] = "Start Time";
      tableColumnNames[7] = "End Time";
      tableColumnNames[8] = "UserName";
      amod.setColumnIdentifiers(tableColumnNames);
      Object[] obj = new Object[9];
      if (myList.size() > 0) {
         for (int i = 0; i < myList.size(); i++) {
            ReservedRooms hashmap = myList.get(i);
            obj[0] = hashmap.getReservationNumber().intValue();
            obj[1] = hashmap.getBuilding().toString();
            obj[2] = hashmap.getRoomNumber();
            obj[3] = hashmap.getDay();
            obj[4] = hashmap.getMonth();
            obj[5] = hashmap.getYear();
            obj[6] = hashmap.getStartTime();
            obj[7] = hashmap.getEndTime();
            obj[8] = hashmap.getUserName().toString();
            amod.addRow(obj);
         }
         this.jTable2.setModel(amod);
      }
   }
}
